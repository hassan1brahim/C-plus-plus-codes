#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);
vector<string> split(const string &);
// My algorithm bascially consisted of making real time changes to another array v, mirroring the changes of array q, like 5(which was in index 4) would be shifted from that index to index 2 in code time, mirroring its position in Q. This code didnt meet the time complexity issue
void minimumBribes(vector<int> q){
    int bribe = 0; 
    for(int j = 0; j < q.size(); j++){
        int val = q[j];
        if(val -(j + 1) > 2){ // Basically this means that the number(val) has bribed more than 3 ppl. (j + 1) is because j starts from 0. 5th number can only be bribed to position 3, or j = 2 at max.
            std::cout << "Too chaotic" << endl;
            return;
        }
        if(val <= j + 1) for(int i = max(0, val - 2); i < j; i++) if(q[i] > q[j]) bribe++;// Alot of things happening. val <= j + 1 to only check for elements which havent been bribed. In this check, we execute a loop where we compare the previous elements of the array with the element that appears not to be bribed (q[j]). All the elements which are greater than this element (q[i]), are bribed elements and so bribe is indexed. In the beginning we will check from 0, but than we will check from (val - 2), which is the max that the greater element right next to val can go back without being too chaotic.
    }
    std::cout << bribe << endl;
}

int main(){
    string t_temp;
    getline(cin, t_temp);

    int t = stoi(ltrim(rtrim(t_temp)));

    for (int t_itr = 0; t_itr < t; t_itr++) {
        string n_temp;
        getline(cin, n_temp);

        int n = stoi(ltrim(rtrim(n_temp)));

        string q_temp_temp;
        getline(cin, q_temp_temp);

        vector<string> q_temp = split(rtrim(q_temp_temp));

        vector<int> q(n);

        for (int i = 0; i < n; i++) {
            int q_item = stoi(q_temp[i]);

            q[i] = q_item;
        }

        minimumBribes(q);
    }

    return 0;
}

string ltrim(const string &str){
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str){
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}

vector<string> split(const string &str){
    vector<string> tokens;

    string::size_type start = 0;
    string::size_type end = 0;

    while ((end = str.find(" ", start)) != string::npos) {
        tokens.push_back(str.substr(start, end - start));

        start = end + 1;
    }

    tokens.push_back(str.substr(start));

    return tokens;
}
